{"version":3,"sources":["tmdb.js","components/MovieRow.js","components/featuredMovie.js","components/Header/index.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","style","fontSize","Math","round","window","innerWidth","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","role","aria-label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b56fc25.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nconst API_KEY = '9c6e4d77b3d0768fce07b04d97c4f858';\r\nconst API_BASE = 'https://api.themoviedb.org/3'\r\n\r\n\r\n/*\r\n- originais na netflix\r\n- recomendados\r\n- em alta\r\n- ação\r\n- comédia\r\n- terror\r\n- romance \r\n- documentários\r\n*/\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`)\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para você',\r\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Action',\r\n                items: await basicFetch(`/discover/movie?with_genre=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genre=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genre=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genre=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genre=99&language=pt-BR&api_key=${API_KEY}`)\r\n            }\r\n        ]\r\n    },\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n\r\n        if(movieId) {\r\n            switch(type){\r\n                case 'movie':\r\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n                break;\r\n                case 'tv':\r\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n                break\r\n                default:\r\n                    info = null\r\n                    break\r\n            }\r\n        }\r\n        return info;\r\n    }\r\n}","/* eslint-disable import/no-anonymous-default-export */\r\nimport React, { useState } from 'react';\r\nimport './MovieRow.css'\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({title, items}) => {\r\n    const [scrollX, setScrollX] = useState(0);\r\n    \r\n    const handleLeftArrow = () => {\r\n        let x = scrollX + 150;\r\n        if(x > 0) {\r\n            x = 0;\r\n        }\r\n        setScrollX(x)\r\n    }\r\n\r\n    const handleRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth/2)\r\n        let listW = items.results.length * 150\r\n        if((window.innerWidth - listW) > x ){\r\n            x = (window.innerWidth - listW) - 60\r\n        }\r\n        setScrollX(x)\r\n    }\r\n\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n                <NavigateBeforeIcon style={{fontSize:50}}/>\r\n            </div>\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n                <NavigateNextIcon style={{fontSize:50}}/>\r\n            </div>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{\r\n                    marginLeft :scrollX,\r\n                    width: items.results.length * 150\r\n                }}>\r\n\r\n                    {items.results.length > 0 && items.results.map((item,key)=>(\r\n                        <div key={key} className=\"movieRow--item\">\r\n                            <img src={`https://image.tmdb.org/t/p/w300/${item.poster_path}`} alt={item.original_title}/>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport React from 'react';\r\nimport './featuredMovie.css'\r\n\r\nexport default ({item}) => {\r\n\r\n    let firstDate = new Date(item.first_air_date)\r\n\r\n    let genres = []\r\n    for (let i in item.genres) {\r\n        genres.push( item.genres[i].name )\r\n    }\r\n\r\n    let description = item.overview;\r\n    if(description.length > 300){\r\n        description = description.substring(0,200) + '...'\r\n    }\r\n\r\n    return(\r\n    <section className=\"featured\" style={{\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`   \r\n        }}>      \r\n            <div className=\"featured--vertical\">\r\n                <div className=\"featured--horizontal\">\r\n                    <div className=\"featured--name\">{item.original_name}</div>\r\n                    <div className=\"featured--info\">\r\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\r\n                    </div>\r\n                    <div className=\"featured--description\">{description}</div>\r\n                    <div className=\"featured--buttons\">\r\n                        <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">► Assistir</a>\r\n                        <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">+ Minha Lista</a>\r\n                    </div>\r\n                    <div className=\"featured--genres\"><strong>Generos: </strong>{genres.join(', ')}</div>\r\n                </div>\r\n            </div>\r\n    </section>)\r\n}","/* eslint-disable import/no-anonymous-default-export */\r\nimport React from 'react'\r\nimport './Header.css'\r\n\r\nexport default ({black}) => {\r\n    return (\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://www.freepnglogos.com/uploads/netflix-tv-logo-png-9.png\" alt=\"Netflix\"/>\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://occ-0-3805-185.1.nflxso.net/dnm/api/v6/0RO1pLmU93-gdXvuxd_iYjzPqkc/AAAABZiSyrRci77umHuATdA0OCHdMx0Bb2mWhVc0ihermsQZehGuoO-ugrnHy8u8EoOh5NoAIDZTs4DzBgQKUJ8_GMvr3y4R.png\" alt=\"Usuário\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    )\r\n}","/* eslint-disable import/no-anonymous-default-export */\nimport React, { useEffect, useState } from 'react'\nimport Tmdb from './tmdb'\nimport MovieRow from './components/MovieRow'\nimport FeaturedMovie from './components/featuredMovie'\nimport './App.css'\nimport  Header from './components/Header'\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([])\n  const [featuredData, setFeaturedData] = useState(null)\n  const [blackHeader, setBlackHeader] = useState(false)\n\n  useEffect (() => {\n    const loadAll = async () => {\n      // Pegando a lista TOTAL\n      let list = await Tmdb.getHomeList();\n      setMovieList(list)\n      \n      // Pegando Featured\n      let originals = list.filter(i=>i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1))\n      let chosen = originals[0].items.results[randomChosen]\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv')\n  \n      setFeaturedData(chosenInfo)\n    }\n    \n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if(window.scrollY > 100){\n        setBlackHeader(true);\n      } else {  \n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener)\n    return () => {\n      window.removeEventListener('scroll', scrollListener)\n    }\n  }, [])\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader}/>\n\n      {featuredData &&\n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className=\"lists\">\n      {movieList.map((item, key)=> {\n            return (<div>\n                <MovieRow key={key} title={item.title} items={item.items}/>\n              </div>)\n          })}\n      </section>\n\n      <footer>\n        Feito com <span role=\"img\" aria-label=\"coração\">❤️</span> Pela B7 Web <br/>\n        Direitos de imagem para Netflix <br/>\n        Dados pegos do site Themoviedb.Org\n      </footer>\n      {movieList.length <= 0 &&\n      <div className=\"loading\">\n        <img src=\"https://www.filmelier.com/pt/br/news/wp-content/uploads/2020/03/netflix-loading.gif\" alt=\"Carregando\" />\n      </div>\n      }\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render( \n  <React.StrictMode>\n  <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}